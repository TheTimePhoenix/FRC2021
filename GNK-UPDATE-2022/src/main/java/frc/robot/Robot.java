package frc.robot;

import com.revrobotics.CANSparkMax.IdleMode;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandScheduler;
import frc.robot.Autonomous.*;
import frc.robot.commands.ArmGoToPosition;
import frc.robot.commands.DriveDistance;
import frc.robot.commands.Turn;
import frc.robot.subsystems.*;
import frc.robot.subsystems.Drive;
import frc.robot.subsystems.Funnel;
import frc.robot.subsystems.Lift;
import frc.robot.subsystems.ControlPanel.ControlPosition;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// online import for ctre: https://maven.ctr-electronics.com/release/com/ctre/phoenix/Phoenix-frc2022-latest.json
// online import for kauailabs navx: https://www.kauailabs.com/dist/frc/2022/navx_frc.json
// online import for rev robotics: https://software-metadata.revrobotics.com/REVLib.json
// changes to rev robotics api: https://docs.revrobotics.com/sparkmax/software-resources/spark-max-api-information
// changes to wpilib: https://docs.wpilib.org/en/stable/docs/yearly-overview/yearly-changelog.html
// deprecations to wpilib: https://first.wpi.edu/wpilib/allwpilib/docs/release/java/deprecated-list.html

public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();


    public static RobotContainer robotContainer;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static Drive drive;
    public static Funnel funnel;
    public static ControlPanel cPanel;
    public static Lift Lift;
    public static Shooter Shooter;
    //public static Lights lights;

    public static RobotPreferences preferences;
    

    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        Constants.init();

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
      
        drive = new Drive();
        funnel = new Funnel();
        cPanel = new ControlPanel();
        Lift = new Lift();
        Shooter = new Shooter();
        //lights = new Lights();
        

        preferences = new RobotPreferences();




        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        robotContainer = new RobotContainer();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        //chooser.addOption("Initiation", new Initiation70inch());
        //chooser.addOption("Straight Dump", new StraightDump());
        //chooser.addOption("Side Dump", new SideDump());
        //chooser.addOption("Skedaddle Trench Dump", new DumpTrenchSkedaddle());
        //chooser.addOption("Skedaddle Switch Dump", new DumpSwitchSkedaddle());
        //chooser.addOption("Trench Lemons", new CollectTrenchLemons());
        //chooser.addOption("Pathfinder", robotContainer.getAutonomousCommand());
        chooser.addOption("Barrel Run", new SetTurn());
        chooser.addOption("IMU_DRIVE", new IMU_DRIVE());
        chooser.addOption("Slalom Path", new SlalomPath());
        chooser.addOption("Bounce Path", new BouncyPath());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);

        SmartDashboard.putBoolean("Rotate PID Tune", false);
        SmartDashboard.putNumber("Rotate P: ", RobotPreferences.getRotateP());
        SmartDashboard.putNumber("Rotate I: ", RobotPreferences.getRotateI());
        SmartDashboard.putNumber("Rotate D: ", RobotPreferences.getRotateD());
        SmartDashboard.putNumber("IMU Heading", Constants.imu.getYaw());

    //    SmartDashboard.putBoolean("DriveDist PID Tune", false);
    //    SmartDashboard.putNumber("DriveDist P: ", RobotPreferences.getDriveDistP());
    //    SmartDashboard.putNumber("DriveDist I: ", RobotPreferences.getDriveDistI());
    //    SmartDashboard.putNumber("DriveDist D: ", RobotPreferences.getDriveDistD());
 
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        CommandScheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        Constants.imu.zeroYaw();
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.schedule();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        CommandScheduler.getInstance().run();
        
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        //Lift.setServoUnlocked();

   }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        CommandScheduler.getInstance().run();
    
    }

}
