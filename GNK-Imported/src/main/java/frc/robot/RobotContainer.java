// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot;

import java.io.IOException;
import java.nio.file.Path;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Filesystem;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.controller.PIDController;
import edu.wpi.first.wpilibj.controller.RamseteController;
import edu.wpi.first.wpilibj.controller.SimpleMotorFeedforward;
import edu.wpi.first.wpilibj.trajectory.Trajectory;
import edu.wpi.first.wpilibj.trajectory.TrajectoryUtil;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.RamseteCommand;
import edu.wpi.first.wpilibj2.command.button.Button;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
//import frc.robot.Autonomous.CPRotate;
//import frc.robot.Autonomous.CPToColor;
//import frc.robot.Autonomous.Initiation70inch;
//import frc.robot.Autonomous.StraightDump;
//import frc.robot.commands.ArmGoToPosition;
//import frc.robot.commands.AutoRotate;
import frc.robot.commands.DriveDistance;
import frc.robot.commands.FunnelCommand;
//import frc.robot.commands.IndexingFunnel;
//import frc.robot.commands.LevelingLift;
import frc.robot.commands.LiftManual;
import frc.robot.commands.Music;
import frc.robot.commands.ShooterCommand;
//import frc.robot.commands.ManualSliderFunnel;
import frc.robot.commands.StickDrive;
import frc.robot.commands.TurretCommand;
import frc.robot.subsystems.Drive;
import frc.robot.subsystems.Funnel;
import frc.robot.subsystems.Lift;
import frc.robot.subsystems.Shooter;
//import frc.robot.subsystems.ControlPanel.ControlPosition;
import frc.robot.subsystems.Funnel.FunnelState;
import frc.robot.subsystems.Lift.LiftMotion;
import frc.robot.subsystems.Shooter.ShooterState;
import frc.robot.subsystems.Shooter.TurretState;



/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class RobotContainer {


    private final Drive drive = Robot.drive;
    public static Funnel funnel = Robot.funnel;
    //private final Lift2 Lift2 = Robot.Lift2;
    private final Lift lift = Robot.Lift;
    private final Shooter shooty = Robot.Shooter;
    private final StickDrive stickDrive = new StickDrive(drive);

    //private final ManualSliderFunnel manFunnel = new ManualSliderFunnel();



    public Joystick driveStick = new Joystick(0);
    public Joystick arduino = new Joystick(1);
    
    Button LiftUp;
    Button LiftDown;
    Button LiftUp2;
    Button LiftDown2;
    Button LiftUpAll;
    Button LiftDownAll;

    //public JoystickButton rotate0;
    //public JoystickButton rotate90;
    //public JoystickButton rotate180;
    //public JoystickButton rotateNeg90;

    public JoystickButton Shoot;
    public JoystickButton Collect;
    public JoystickButton Spin;
    public JoystickButton ReverseSpin;
    public JoystickButton Dumpy;

    public JoystickButton drive10;
    public JoystickButton driveNeg10;
    public JoystickButton drive20;

    public JoystickButton funnelIntake;
    public JoystickButton funnelOuttake;
    public JoystickButton fullspeedy;


    


    /**
   * The container for the robot.  Contains subsystems, OI devices, and commands.
   */
    public RobotContainer() {

        drive.setDefaultCommand(stickDrive);
      
        //Lift2.setDefaultCommand(new STOP2());
        //Lift.setDefaultCommand(new STOP());
        lift.setDefaultCommand(new LiftManual(LiftMotion.STOP));
        funnel.setDefaultCommand(new FunnelCommand(FunnelState.Stop, 0));
        shooty.setDefaultCommand(new Music());
        configureButtonBindings();
      
    }

    /**
    * Use this method to define your button->command mappings.  Buttons can be created by
    * instantiating a {@link GenericHID} or one of its subclasses ({@link
    * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
    * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
    */
    private void configureButtonBindings() {

        //Drive button bindings
        //rotate0 = new JoystickButton(driveStick, 7);
        //rotate90 = new JoystickButton(driveStick, 8);
        //rotate180 = new JoystickButton(driveStick, 10);
        //rotateNeg90 = new JoystickButton(dri

        drive10 = new JoystickButton(driveStick, 9);
        drive20 = new JoystickButton(driveStick, 7);
        driveNeg10 = new JoystickButton(driveStick, 10);

        fullspeedy = new JoystickButton(driveStick, 1);
        Shoot = new JoystickButton(driveStick, 5);
        Collect = new JoystickButton(driveStick, 6);
        Spin = new JoystickButton(driveStick, 3);
        Dumpy = new JoystickButton(driveStick, 4);
        ReverseSpin = new JoystickButton(driveStick, 7);
        //Funnel Button Bindings
        funnelIntake = new JoystickButton(driveStick, 12);
        funnelOuttake = new JoystickButton(driveStick, 11);

        //Control Panel Button Bindings
        //cpRotate = new JoystickButton(driveStick, 3);
        //cpColor = new JoystickButton(driveStick, 4);

        //Test Button Bindings

        


        //rotate0.whenPressed(new AutoRotate(0).withTimeout(5));
        //rotate90.whenPressed(new AutoRotate(90).withTimeout(5));
        //rotate180.whenPressed(new AutoRotate(180).withTimeout(5));
        //rotateNeg90.whenPressed(new AutoRotate(-90).withTimeout(5));

       // drive10.whenPressed(new DriveDistance(20).withTimeout(5));
       // drive20.whenPressed(new DriveDistance(40).withTimeout(5));
       // driveNeg10.whenPressed(new DriveDistance(-20).withTimeout(5));


      

        //Funnel button actions
        //funnelIntake.whileHeld(new IndexingFunnel(FunnelState.COLLECT));
        //funnelOuttake.whileHeld(new IndexingFunnel(FunnelState.DUMP));

        Collect.whileHeld(new FunnelCommand(FunnelState.Collect, 0.4));
        Shoot.whileHeld(new ShooterCommand(ShooterState.Shoot));
        Spin.whileHeld(new TurretCommand(TurretState.Spin));
        Dumpy.whileHeld(new FunnelCommand(FunnelState.Remove, 0.4));
        ReverseSpin.whileHeld(new TurretCommand(TurretState.ReverseSpin));
        //Control Panel button actions
        //cpRotate.whenPressed(new CPRotate());
        //cpColor.whenPressed(new CPToColor());
      
        //Lift button actions

        //liftUp.whileHeld(new LiftManual(LiftMotion.UP));
        //altLiftDown.whileHeld(new LiftManual(LiftMotion.DOWN));


        //Test button actions
        
        
       
        

    }


    /**
    * Use kthis to pass the autonomous command to the main {@link Robot} class.
    *
    * @return the command to run in autonomous
    */
    public Command getAutonomousCommand() {
        // An ExampleCommand will run in autonomous

        //new Initiation70inch();

        return Initiation(); //configurePathFinder();
    }

    public Command Initiation()
    {
        


      return new DriveDistance(70).withTimeout(3);

    
    }

    public Command configurePathFinder() {
        String trajectoryJSON = "Test.wpilib.json";

        Path trajectoryPath;
        Trajectory trajectory = null;

        try {
        trajectoryPath = Filesystem.getDeployDirectory().toPath().resolve(trajectoryJSON);
        trajectory = TrajectoryUtil.fromPathweaverJson(trajectoryPath);
        } 
        catch (IOException ex) {
        DriverStation.reportError("Unable to open trajectory: " + trajectoryJSON, ex.getStackTrace());
        }

        RamseteCommand ramseteCommand = new RamseteCommand(
            trajectory,
            drive::getPose,
            new RamseteController(Constants.kRamseteB, Constants.kRamseteZeta),
            new SimpleMotorFeedforward(Constants.ksVolts,
                                       Constants.kvVoltSecondsPerMeter,
                                       Constants.kaVoltSecondsSquaredPerMeter),
            Constants.kDriveKinematics,
            drive::getWheelSpeeds,
            new PIDController(Constants.kPDriveVel, 0, 0),
            new PIDController(Constants.kPDriveVel, 0, 0),
            // RamseteCommand passes volts to the callback
            drive::setTankVoltage,
            drive
        );  

        return ramseteCommand.andThen(() -> drive.setDrive(0, 0));
    }

}

